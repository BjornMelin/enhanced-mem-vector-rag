version: '3.8'

services:
  # MCP Server
  mcp-server:
    build:
      context: ..
      dockerfile: deployment/dockerfiles/mcp-server.Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    volumes:
      - mcp_logs:/app/logs
      - models:/app/models
    depends_on:
      - qdrant
      - neo4j
      - supabase
    restart: unless-stopped
    networks:
      - emvr-network
    environment:
      - QDRANT_URL=http://qdrant:6333
      - NEO4J_URI=bolt://neo4j:7687
      - SUPABASE_URL=${SUPABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

  # Chainlit UI
  chainlit-ui:
    build:
      context: ..
      dockerfile: deployment/dockerfiles/chainlit-ui.Dockerfile
    ports:
      - "8501:8501"
    env_file:
      - ../.env
    volumes:
      - ui_logs:/app/logs
      - uploads:/app/uploads
    depends_on:
      - mcp-server
    restart: unless-stopped
    networks:
      - emvr-network
    environment:
      - MCP_SERVER_URL=http://mcp-server:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  # Qdrant Vector Database (via Mem0)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - emvr-network
    restart: unless-stopped

  # Neo4j Graph Database (for Graphiti)
  neo4j:
    image: neo4j:5.11
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
      - neo4j_plugins:/plugins
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/emvrpassword}
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,n10s.*
    networks:
      - emvr-network
    restart: unless-stopped

  # Supabase (Local Development)
  supabase:
    image: supabase/postgres:15.1.0.98
    ports:
      - "5432:5432"
    volumes:
      - supabase_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-emvrpassword}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
    networks:
      - emvr-network
    restart: unless-stopped

  # Grafana (Monitoring)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - emvr-network
    restart: unless-stopped

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - emvr-network
    restart: unless-stopped

networks:
  emvr-network:
    driver: bridge

volumes:
  mcp_logs:
  ui_logs:
  models:
  uploads:
  qdrant_storage:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  supabase_data:
  grafana_data:
  prometheus_data: